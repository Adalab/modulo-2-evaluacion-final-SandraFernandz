{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.js_button');\nconst givenInput = document.querySelector('.js_input');\nconst ulList = document.querySelector('.js_ulList');\nconst ulListFavs = document.querySelector('.js_ulList2');\n\n//variable local que almacena el resultado de la búsqueda de las series introducida en el input de texto\nlet series = [];\nlet favorites = [];\n\n//función manejadora del evento click de button.addEventListener para que al hacer click en el botón, la aplicación se conecte a la api de TVMaze\n//función que permite hacer una petición al servidor si no tengo datos en el local storage:\nfunction handleConnectTv(ev) {\n  //variable que recoge el valor introducido por usuaria\n  let textInput = givenInput.value.toLowerCase();\n\n  //1.Realizamos petición de una api al servidor:\n  //parámetros a la URL de tipo clave=valor, siempre tras ? y separados por &,\n  // p.e. para pedir string con longitud determinada, la url quedaría así https://api.rand.fun/text/password?length=20\n  //3. Obtenemos los datos del servidor y lo almacenamos en la variable global series\n  fetch(`https://api.tvmaze.com/search/shows?q=${textInput}`)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data);\n      series = data;\n      console.log(series);\n      //6. Llamamos a la función para que la búsqueda del input resulte en un listado de series con título y cartel (imagen) y las pintamos:\n      paintSeries();\n      setInLocalStorage();\n    });\n}\n\n//2.cd presiono botón, se desencadena evento de ir a buscar datos mediante la función handleConnectTv\nbutton.addEventListener('click', handleConnectTv);\n\n//4. Pintamos las series resultado de la búsqueda\n//función para que la búsqueda del input resulte en un listado de series con título y cartel (imagen) y lo pinte en la constante global arreglo series =[];\nfunction paintSeries() {\n  let html = '';\n  //la variable favClass contiene la clase que yo le quiero poner al li\n  let favClass = '';\n  //verifico que el elemento x el q me estoy paseando es favorito\n  //si es favorito,\n  for (const serie of series) {\n    //otengo lo que me ha devuelto la función que valida si es favorito y lo guardo en la variable isFav. esa constante isFav contiene false or true.\n    const isFav = isFavorite(serie);\n    //si es favorito, le añado la clase\n    if (isFav) {\n      favClass = 'main_ulList_container_li_title';\n    } else {\n      favClass = '';\n    }\n    //${favClass} es la variable que contiene la clase q aplicamos a serie seleccionada como favorita. añadimos la clase a todos los li y si los marcan como favoritos, la aplica, sino, la pasa vacía\n    html += `<li class= 'listItem js_listItem \n    main_ulList_container_li ${favClass}' id='${serie.show.id}'>`;\n\n    console.log(serie.show.name);\n    //bucle con if para caso en el que no exista cartel de la serie.\n    html += `<div main_ulList_container_li_div>`;\n    html += `<h2 class='main_ulList_h2'>${serie.show.name}</h2>`;\n    if (serie.show.image) {\n      html += `<img src=\"${serie.show.image.original}\" class=\"main_ulList_container_li_img\"/>`;\n    } else {\n      html += `<img src=\"https://via.placeholder.com/210x295/ffffff/666666/?text=TV\" alt=\"image of series\" class=\"main_ulList_container_li_img\">`;\n    }\n    html += `</div>`;\n    html += `</li>`;\n  }\n  ulList.innerHTML = html;\n  console.log(html);\n  //escucha el click sobre cada elemento de la lista\n  listenListedSeries();\n}\n\n//.8 creamos función para poder hacer clicklables las series mediante un addEventListener.\n//creamos una función para poder escuchar en cada una de las series y poder marcarlas con su id si el usuario las elige como favoritas\nfunction listenListedSeries() {\n  //selecciono todos los li pintados de la lista\n  const listSeries = document.querySelectorAll('.js_listItem');\n  //recorro el array de los li para escuchar eventos en cada uno de ellos\n  for (const listEl of listSeries) {\n    //escucho el evento sobre cada serie de la lista\n    listEl.addEventListener('click', handleList);\n  }\n}\n\n//9. Función que maneja el evento de convertir las series resultado en clickables, y obtener su id al hacer click sobre ella\n//función manejadora del evento de escuchar en cada serie y entre ellas elegir una y añadirla a favoritos\nfunction handleList(ev) {\n  //obtengo el id de la serie clickada\n  const selectedSeries = ev.currentTarget.id;\n\n  console.log(ev.currentTarget.id);\n  //busco la serie clickada en el array de series paso una función que tiene como parámetro cada serie\n  const clickedItem = series.find((serie) => {\n    //el id de la serie corresponde al id del elemento clickado\n    //si find no encuentra el elemento devuelve undefined\n    return serie.show.id === parseInt(selectedSeries);\n  });\n\n  //11. busco si la serie clickada está en el array de favoritos; Si no está, el valor de vuelta será -1, sino, devuelve la posición. busco dentro de mi array de favoritos \"favorites\". \"fav\" hace referencia a cada uno de los elementos de del array favorites\n\n  const favoritesFound = favorites.findIndex((fav) => {\n    return fav.show.id === parseInt(selectedSeries);\n  });\n\n  if (favoritesFound === -1) {\n    favorites.push(clickedItem);\n  } else {\n    favorites.splice(favoritesFound, 1);\n  }\n\n  console.log(favorites);\n  //función que añade o quita clase según si es o no favorito. está definida más abajo. la llamo cd vez que modifico el array de favoritos\n  paintSeries();\n  //pinta las favoritas en nueva sección\n  printFavoriteList();\n\n  console.log(selectedSeries);\n  console.log(favoritesFound);\n}\n\n//11. creo una función que verifica si ese li(elemento que quiero pintar es un favorito), me retorna un valor y luego yo le añado la clase. Le pasamos como parámetro cuál es la serie del objeto que quiero ver si es favorito o no(en la función isFavorite)\n\nfunction isFavorite(serie) {\n  //busco si un elemento (fav) se encuentra dentro del array de favorites o no\n  const favoriteFound = favorites.find((fav) => {\n    //la serie que estoy pansando es favorita?\n    return fav.show.id === serie.show.id;\n  });\n  //si sí es favorita\n  if (favoriteFound === undefined) {\n    //significa que el elemento no es favorito\n    return false;\n  } else {\n    return true;\n  }\n  //ese valor de false o true es el que voy a usar dentro del bucle for en la función paintSeries y decido si añado la clase para favoritos o no\n}\n//14. añadimos la información al localStorage:\n\nfunction setInLocalStorage() {\n  //stringify me permite transformar a string el array de palettes\n  const stringSeries = JSON.stringify(favorites);\n  //añadimos al localStorage los datos convertidos en string previamente\n  localStorage.setItem('favorites', stringSeries);\n}\n\n//13. función que nos permite buscar en el localStorage si ya hay info guardada\nfunction getLocalStorage() {\n  //obtenemos lo que hay en el LS\n  const localStorageSeries = localStorage.getItem('favorites');\n  //siempre q cojo datos del localStorage tengo q comprobar si son válidos\n  //es decir, si es la primera vez que entro en la pág\n  if (localStorageSeries === null) {\n    //no tengo datos en el local storage, así q llamo al API con la petición al servidor (la del principio)\n    //getFromApi(); así le llama dayana en su ej\n    handleConnectTv();\n  } else {\n    //sí tengo datos en el localStorage, así lo parseo a un array y\n    const arrayFavorites = JSON.parse(localStorageSeries);\n    //lo guardo en la var global de series\n    favorites = arrayFavorites;\n    printFavoriteList();\n    paintSeries();\n  }\n}\n\n////////12. función para pintar series en lista de favoritos\n\nfunction printFavoriteList() {\n  let favsHtml = '';\n  for (const eachFav of favorites) {\n    favsHtml += `<li class= 'listItem js_listItem main_ulList_container_li' id='${eachFav.show.id}'>`;\n    favsHtml += `<h2>${eachFav.show.name}</h2>`;\n    console.log(eachFav.show.name);\n    //bucle con if para caso en el que no exista cartel de la serie.\n    favsHtml += `<div main_ulList_container_li_div>`;\n    if (eachFav.show.image) {\n      favsHtml += `<img src=\"${eachFav.show.image.original}\" class=\"main_ulList_container_li_img\"/>`;\n    } else {\n      favsHtml += `<img src=\"https://via.placeholder.com/210x295/ffffff/666666/?text=TV\" alt=\"image of series\" class=\"main_ulList_container_li_img\"/>`;\n    }\n    favsHtml += `<button id=\"${eachFav.show.id}\" class=\"js_favButton\">X</button>`;\n    favsHtml += `</div>`;\n    favsHtml += `</li>`;\n  }\n  console.log(favsHtml);\n  ulListFavs.innerHTML = favsHtml;\n  //favs son clickables\n  makeFavClickable();\n  //los datos que me ha dado la API los guardamos en localStorage:\n  setInLocalStorage();\n  //listenListedSeries();\n}\n//.15 llamo a la función de almacenamiento\ngetLocalStorage();\n\n//Eliminar favoritos de la lista de elegidos//////////////\n//F1.//función para hacer cada botón clickable mediante un addEVentListener\n\nfunction makeFavClickable() {\n  const favButton = document.querySelectorAll('.js_favButton');\n  //selecciono TODOS botones de la sección de favoritos\n\n  for (const eachButton of favButton) {\n    //F2.recorro el array de los botones favoritos y escucho evento en CADA uno de ellos\n    eachButton.addEventListener('click', handleRemoveFavFromFavsList);\n  }\n}\n//traigo el div que contiene los favoritos\nconst favDiv = document.querySelector('.js_div2');\n// //F3. función manejadora del evento\n\nfunction handleRemoveFavFromFavsList(ev) {\n  let clickedFav = parseInt(ev.currentTarget.id);\n\n  // favorites = [];\n  // //limpiamos el ls\n  // localStorage.clear();\n  // //recargar la página después de borrar\n  // location.reload();\n\n  //const findClicked = favorites.findIndex(clickedFav);\n  //favorites.splice();\n  // console.log(clickedFav);\n}\n\n//   favDiv.innerHTML = '';\n//}\n// console.log(searchClickedFav);\n// if (clickedFav !== null) {\n//   clickedFav = '';\n// }\n\n//const clickedFav = favorites.find(clickedElement) =>{\n//return clickedElement = '';\n//}\n"]}